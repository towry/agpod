name: "Rust Test Suite"

on:
  push:
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/rust.yml'
      - 'rust-toolchain.toml'
      - 'build.rs'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: rustfmt
    runs-on: ubuntu-latest
    # Skip if commit message starts with "chore(main): release" (release-please)
    if: "!startsWith(github.event.head_commit.message, 'chore(main): release')"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache Rust toolchain to speed up installation
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rustup-stable-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rustup-stable-
            ${{ runner.os }}-rustup-

      - name: Install toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          # Speed up by avoiding redundant installs
          cache: false

      # Enhanced cargo caching
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-fmt"
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  clippy:
    name: clippy
    runs-on: ubuntu-latest
    # Skip if commit message starts with "chore(main): release" (release-please)
    if: "!startsWith(github.event.head_commit.message, 'chore(main): release')"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache Rust toolchain to speed up installation
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rustup-stable-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rustup-stable-
            ${{ runner.os }}-rustup-

      - name: Install toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy
          # Speed up by avoiding redundant installs
          cache: false

      # Enhanced cargo caching
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-clippy"
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run clippy
        env:
          RUSTFLAGS: -D warnings
        run: cargo clippy --workspace --all-targets --all-features --verbose

  test:
    name: tests (stable)
    runs-on: ubuntu-latest
    # Skip if commit message starts with "chore(main): release" (release-please)
    if: "!startsWith(github.event.head_commit.message, 'chore(main): release')"
    needs:
      - fmt
      - clippy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache Rust toolchain to speed up installation
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rustup-stable-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rustup-stable-
            ${{ runner.os }}-rustup-

      - name: Install toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          # Speed up by avoiding redundant installs
          cache: false

      # Enhanced cargo caching
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-test"
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run tests
        run: cargo test --all-features --verbose -- --test-threads=1

  cross_platform_test:
    name: Cross-platform binary test
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolchain: stable
          - os: macos-latest
            target: aarch64-apple-darwin
            toolchain: stable
          - os: macos-latest
            target: x86_64-apple-darwin
            toolchain: stable

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Cache Rust toolchain to speed up installation
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rustup-${{ matrix.target }}-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-rustup-${{ matrix.target }}-
            ${{ runner.os }}-rustup-

      - name: Install toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          cache: false

      # Enhanced cargo caching
      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-cross-${{ matrix.target }}"
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Build for target
        run: cargo build --release --target ${{ matrix.target }} --verbose

      - name: Test binary functionality
        shell: bash
        run: |
          # Create a comprehensive test diff
          cat > test_diff.txt << 'EOF'
          diff --git a/src/main.rs b/src/main.rs
          index 1234567..abcdefg 100644
          --- a/src/main.rs
          +++ b/src/main.rs
          @@ -1,10 +1,15 @@
           use std::io::{self, Read};
          +use regex::Regex;

           fn main() -> io::Result<()> {
          +    let large_file_pattern = Regex::new(r".*").unwrap();
               let mut input = String::new();
               io::stdin().read_to_string(&mut input)?;
          +
          +    // Process the diff content
          +    let minimized = minimize_diff(&input, &large_file_pattern);
          +    println!("{}", minimized);
          +
               Ok(())
           }

          +fn minimize_diff(input: &str, pattern: &Regex) -> String {
          +    // Implementation here
          +    input.to_string()
          +}
          EOF

          # Test the binary
          target/${{ matrix.target }}/release/agpod < test_diff.txt
          echo "âœ… Binary test passed for ${{ matrix.target }}"

      - name: Display binary info
        shell: bash
        run: |
          echo "ðŸ“Š Binary information for ${{ matrix.target }}:"
          if command -v file >/dev/null 2>&1; then
            file target/${{ matrix.target }}/release/agpod
          fi
          ls -lh target/${{ matrix.target }}/release/agpod